# Generated by Django 5.0.2 on 2024-04-09 10:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("player_type", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("venue_name", models.CharField(max_length=100)),
                ("matches", models.IntegerField()),
                ("total_run", models.IntegerField()),
                ("dot_balls", models.IntegerField()),
                ("is_wicket_delivery", models.IntegerField()),
                ("delivery", models.IntegerField()),
                ("fours", models.IntegerField()),
                ("sixes", models.IntegerField()),
                ("average_score", models.FloatField()),
                ("dot_ball_percentage", models.FloatField()),
                ("average_wickets_fallen", models.FloatField()),
                ("boundary_frequency", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="Batsman",
            fields=[
                (
                    "player_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="predict2.player",
                    ),
                ),
                ("team", models.CharField(max_length=100)),
                ("active_ratio_death", models.FloatField()),
                ("striking_ratio_death", models.FloatField()),
                ("true_sr_death", models.FloatField()),
                ("true_avg_death", models.FloatField()),
                ("active_ratio_middle", models.FloatField()),
                ("striking_ratio_middle", models.FloatField()),
                ("true_sr_middle", models.FloatField()),
                ("true_avg_middle", models.FloatField()),
                ("active_ratio_powerplay", models.FloatField()),
                ("striking_ratio_powerplay", models.FloatField()),
                ("true_sr_powerplay", models.FloatField()),
                ("true_avg_powerplay", models.FloatField()),
            ],
            bases=("predict2.player",),
        ),
        migrations.CreateModel(
            name="Bowler",
            fields=[
                (
                    "player_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="predict2.player",
                    ),
                ),
                ("team", models.CharField(max_length=100)),
                ("true_economy_death", models.FloatField()),
                ("true_sr_death", models.FloatField()),
                ("dot_percentage_death", models.FloatField()),
                ("containment_death", models.FloatField()),
                ("true_economy_middle", models.FloatField()),
                ("true_sr_middle", models.FloatField()),
                ("dot_percentage_middle", models.FloatField()),
                ("containment_middle", models.FloatField()),
                ("true_economy_powerplay", models.FloatField()),
                ("true_sr_powerplay", models.FloatField()),
                ("dot_percentage_powerplay", models.FloatField()),
                ("containment_powerplay", models.FloatField()),
            ],
            bases=("predict2.player",),
        ),
    ]
